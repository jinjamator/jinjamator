# Copyright 2019 Wilhelm Putz

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from flask_restx import fields
from jinjamator.daemon.api.restx import api


site = api.model(
    "site",
    {
        "id": fields.String(required=True, description="Generated ID of site"),
        "name": fields.String(required=True, description="Generated name of site"),
    },
)


environment = api.model(
    "environment",
    {
        "id": fields.String(required=True, description="Generated ID of environment"),
        "name": fields.String(required=True, description="Name of environment"),
        "path": fields.String(required=True, description="Path to environment"),
        "sites": fields.List(fields.Nested(site)),
    },
)

environments = api.model(
    "environments", {"environments": fields.List(fields.Nested(environment))}
)

task_info = api.model(
    "task_info",
    {
        "id": fields.String(required=True, description="Generated ID of task"),
        "path": fields.String(
            required=True, description="Relative task path to base_dir"
        ),
        "base_dir": fields.String(
            required=True, description="Basedir where task was found"
        ),
        "description": fields.String(required=True, description="Description of task"),
        "gui": fields.Boolean(description="Render in GUI"),
    },
)

tasks = api.model("tasks_object", {"tasks": fields.List(fields.Nested(task_info))})

job_brief = api.model(
    "job_object",
    {
        "job": fields.Nested(
            api.model(
                "job_info",
                {
                    "number": fields.String(
                        required=True, description="Job number generated by Celery"
                    ),
                    "id": fields.String(
                        required=True, description="Task ID generated by Jinjamator"
                    ),
                    "state": fields.String(required=True, description="Status of job."),
                    "date_done": fields.String(
                        required=True, description="Finishing Time of Job"
                    ),
                    "date_start": fields.String(
                        required=True, description="Start Time of Job"
                    ),
                    "date_scheduled": fields.String(
                        required=True,
                        description="Time when jinjamator enqueued the Job",
                    ),
                    "task": fields.String(
                        required=True,
                        description="Relative path to task which will be, or has been executed",
                    ),
                    "created_by_user_id": fields.Integer(
                        required=True,
                        description="Userid of User which created the job",
                    ),
                    "created_by_user_name": fields.String(
                        required=True,
                        description="Username of User which created the job",
                    ),
                },
            )
        )
    },
)

aaa_login_post = api.model(
    "aaa_login_post",
    {
        "username": fields.String(required=True, description="Your Username"),
        "password": fields.String(required=True, description="Your Password"),
    },
)


aaa_create_user = api.model(
    "aaa_create_user",
    {
        "username": fields.String(required=True, description="New Users Username"),
        "name": fields.String(
            required=True, description="New Users Name e.g. John Doe"
        ),
        "password": fields.String(required=True, description="New Users Password"),
    },
)

aaa_edit_user = api.model(
    "aaa_edit_user",
    {
        "username": fields.String(required=True, description="Username"),
        "name": fields.String(
            required=False, description="Users Full Name e.g. John Doe"
        ),
        "password": fields.String(required=False, description="New Users Password"),
        "roles": fields.List(fields.String(description="Name of role")),
    },
)

aaa_create_role = api.model(
    "aaa_create_role",
    {"name": fields.String(required=True, description="Name of new role")},
)

aaa_set_user_role = api.model(
    "aaa_set_user_role",
    {"role": fields.String(description="Name of role", required=True)},
)
