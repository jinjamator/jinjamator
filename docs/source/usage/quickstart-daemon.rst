Quickstart Daemon Mode
=======================

To run jinjamator in daemon mode just run it with the -d option. This will start jinjamator with default settings listening on 127.0.0.1 port 5000.

.. code:: shell

    jinjamator -d 

There are many options that can be passed via command line, environment variables or configuration files.

.. code:: shell

    optional arguments:
    -h, --help            show this help message and exit
    -c CONFIGURATION_FILE, --configuration-file CONFIGURATION_FILE
                            config file path
    -o OUTPUT_PLUGIN, --output-plugin OUTPUT_PLUGIN
                            selects the plugin which is used for futher data processing after tasklet template has been
                            rendered [default: console] (CLI only)
    -m MAPPING, --mapping MAPPING
                            map data (strings,integer or json) to a variable, e.g. -m 'var_name:asdf' or -m
                            'var_name:{"key":"value"}' (CLI only)
    -t _TASKDIR, --task-dir _TASKDIR
                            path to task directory or tasklet file which should be run (CLI only)
    --best-effort         allow tasklets to fail (CLI only)
    -v, --verbose         set verbosity level [default: ERROR]
    -V, --version         show program's version number and exit
    -g _GLOBAL_DEFAULTS, --global-defaults _GLOBAL_DEFAULTS
                            path to a global defaults.yaml [default: None]
    -d, --daemonize       run in daemon mode
    --listen-address _DAEMON_LISTEN_ADDRESS
                            on which ip should the daemon listen [default: 127.0.0.1] [env var:
                            JINJAMATOR_DAEMON_LISTEN_ADDRESS]
    --listen-port _DAEMON_LISTEN_PORT
                            on which TCP port should the daemon listen [default: 5000] [env var:
                            JINJAMATOR_DAEMON_LISTEN_PORT]
    --no-worker           do not spawn local celery worker [env var: JINJAMATOR_DAEMON_NO_WORKER]
    --just-worker         spawn worker only [env var: JINJAMATOR_DAEMON_JUST_WORKER]
    --celery-broker-url _CELERY_BROKER
                            celery broker URL (required for daemon mode) [default: filesystem://] [env var:
                            JINJAMATOR_DAEMON_CELERY_BROKER_URL]
    --celery-result-backend _CELERY_RESULT_BACKEND
                            celery result backend URL (required for daemon mode) [default:
                            sqlite:////home/putzw/.jinjamator/jinjamator-results.db] [env var:
                            JINJAMATOR_DAEMON_CELERY_RESULT_BACKEND_URL]
    --celery-heartbeat-database _CELERY_BEAT_DATABASE
                            celery result beat Database (required for daemon mode) [default:
                            /home/putzw/.jinjamator/jinjamator-beat.db] [env var: JINJAMATOR_DAEMON_CELERY_BEAT_DB_PATH]
    --task-base-dir _GLOBAL_TASKS_BASE_DIRS
                            where should jinjamator look for tasks in daemon mode [default:
                            ['/home/putzw/.jinjamator/tasks', '/usr/local/lib/python3.8/dist-packages/jinjamator/tasks']]
                            [env var: JINJAMATOR_DAEMON_TASK_BASE_DIRECTORIES]
    --output-plugin-base-dir _GLOBAL_OUTPUT_PLUGINS_BASE_DIRS
                            where should jinjamator look for output plugins [default: ['/usr/local/lib/python3.8/dist-
                            packages/jinjamator/plugins/output']] [env var:
                            JINJAMATOR_DAEMON_OUTPUT_PLUGINS_BASE_DIRECTORIES]
    --content-plugin-base-dir _GLOBAL_CONTENT_PLUGINS_BASE_DIRS
                            where should jinjamator look for content plugins [default: ['/usr/local/lib/python3.8/dist-
                            packages/jinjamator/plugins/content']] [env var:
                            JINJAMATOR_DAEMON_CONTENT_PLUGINS_BASE_DIRECTORIES]
    --environment-base-dir _GLOBAL_ENVIRONMENTS_BASE_DIRS
                            where should jinjamator look for environments [default:
                            ['/home/putzw/.jinjamator/environments']] [env var:
                            JINJAMATOR_DAEMON_ENVIRONMENTS_BASE_DIRECTORIES]
    --aaa-configuration-base-dir _AAA_CONFIGURATION_BASE_DIRS
                            where should jinjamator look for aaa configuration files [default:
                            ['/home/putzw/.jinjamator/aaa']] [env var: JINJAMATOR_DAEMON_AAA_BASE_DIRECTORIES]
    --aaa-database-uri _GLOBAL_AAA_DATABASE_URI
                            celery result backend URL (required for daemon mode) [default:
                            sqlite:////home/putzw/.jinjamator/aaa/jinjamator-aaa.db] [env var:
                            JINJAMATOR_DAEMON_AAA_DATABASE_URL]
    --secret-key _SECRET-KEY
                            FLASK application secret key, which is used for token generation (required for daemon mode)
                            [default: autogenerated] [env var: JINJAMATOR_DAEMON_SECRET_KEY]
    --aaa-token-lifetime _AAA_TOKEN_LIFETIME
                            API JWT token lifetime [default: 600] [env var: JINJAMATOR_AAA_TOKEN_LIFETIME]
    --aaa-token-auto-renew_time _AAA_TOKEN_AUTO_RENEW_TIME
                            Renew API JWT token automatically if token lifetime is below this. Set to 0 to disable auto
                            renew [default: 300] [env var: JINJAMATOR_AAA_TOKEN_AUTO_RENEW_TIME]
    --console-pretty-print
                            use pprint instead of print